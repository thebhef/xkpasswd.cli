name: .NET

on:
  push:
    branches: [ main ]
    tags: '*'
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history

      - name: Get branch names
        id: branchName
        uses: tj-actions/branch-names@v2.2

      - name: Git Semantic Version
        id: versionInfo
        uses: paulhatch/semantic-version@v4.0.1
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "xkpasswd.cli"
          # Named version, will be used as suffix for name version tag
          #namespace: project-b
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true


      - name: Get prerelease tag
        if: ${{steps.branchName.onDefault}} == false
        env:
          prerelease-tag: -${{steps.branchName.outputs.head_ref_branch}}.${{ steps.versionInfo.outputs.increment }}
          legacyNugetPrerelease-tag: -${{steps.branchName.outputs.head_ref_branch}}${{ steps.versionInfo.outputs.increment }}
        run: echo "${{prerelease-tag}}" "${{legacyNugetPrereleaseTag}}"

      - name: Get prerelease tag
        if: ${{steps.branchName.onDefault}} == true
        env:
          prerelease-tag: ''
          legacyNugetPrerelease-tag: ''
        run: echo "empty tags"

      - name: Get Prerelease Tag
        env:
          legacyNugetPrerelease-tag: -${{steps.branchName.outputs.head_ref_branch}}${{ steps.versionInfo.outputs.increment }}
          prerelease-tag: -${{steps.branchName.outputs.head_ref_branch}}.${{ steps.versionInfo.outputs.increment }}
          chocoPackageVersion: ${{ steps.versionInfo_nugetLegacy.outputs.version }} ${{ legacyNugetPrerelase-tag }}
          assemblyInformationalVersion: ${{ steps.versionInfo.outputs.version }} ${{ prerelease-tag }}
          assemblyFileVersion: ${{ steps.versionInfo.outputs.major }}.${{ steps.versionInfo.outputs.minor }}.${{ steps.versionInfo.outputs.patch }}.${{ steps.versionInfo.outputs.increment }}
          assemblyVersion: ${{ steps.versionInfo.outputs.major }}.0.0.0
        run: echo $env.chocoPackageVersion


      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore /p:Version=${{ steps.versionInfo.outputs.major }}.0.0.0 /p:InformationalVersion=${{ steps.versionInfo.outputs.version }} /p:AssemblyFileVersion=${{ steps.versionInfo.outputs.major }}.${{ steps.versionInfo.outputs.minor }}.${{ steps.versionInfo.outputs.patch }}.${{ steps.versionInfo.outputs.increment }}
      - name: Test
        run: dotnet test -c Release --no-build --verbosity normal
      - name: Publish
        run: dotnet publish -c Release /p:Version=${{ steps.versionInfo.outputs.major }}.0.0.0 /p:InformationalVersion=${{ steps.versionInfo.outputs.version }} /p:AssemblyFileVersion=${{ steps.versionInfo.outputs.major }}.${{ steps.versionInfo.outputs.minor }}.${{ steps.versionInfo.outputs.patch }}.${{ steps.versionInfo.outputs.increment }}
      - name: Choco Package
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: pack xkpasswd.cli\bin\Release\net5.0\win-x64\publish\xkpasswd.cli.nuspec --Version ${{ steps.versionInfo_nugetLegacy.outputs.version }}
      - name: Push Package To hefnet.co
        run: nuget push xkpasswd.cli.${{ steps.versionInfo_nugetLegacy.outputs.version }}.nupkg ${{ secrets.HEFNET_NUGET_API_KEY }} -Source https://nuget.hefnet.co/api/odata -NonInteractive 
