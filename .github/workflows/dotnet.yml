name: .NET

on:
  push:
    branches: [ main ]
#    tags: 'v*' todo
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history

      - name: Get branch names
        id: branchName
        uses: tj-actions/branch-names@v2.2

      - name: Git Semantic Version
        id: versionInfo
        uses: paulhatch/semantic-version@v4.0.1
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "xkpasswd.cli"
          # Named version, will be used as suffix for name version tag
          #namespace: project-b
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
        
      - name: Get prerelease tag
        id: prereleaseInfo
        run: |
          if ("${{ steps.branchName.outputs.is_default }}" -eq "true"){
            echo "::set-output name=isPrerelease::true"
            echo "::set-output name=prereleaseTag::-main.${{ steps.versionInfo.outputs.increment }}"
            echo "::set-output name=legacyNugetPrereleaseTag::-main${{ steps.versionInfo.outputs.increment }}"            
          } else {
            echo "::set-output name=isPrerelease::true"
            echo "::set-output name=prereleaseTag::-${{ steps.branchName.outputs.head_ref_branch }}.${{ steps.versionInfo.outputs.increment }}"
            echo "::set-output name=legacyNugetPrereleaseTag::-${{ steps.branchName.outputs.head_ref_branch }}${{ steps.versionInfo.outputs.increment }}"
          }
        
      - name: Get Versions
        id: netVersions
        run: |
          echo "::set-output name=chocoPackageVersion::${{ steps.versionInfo.outputs.version }}${{ steps.prereleaseInfo.outputs.legacyNugetPrereleaseTag }}"
          echo "::set-output name=assemblyInformationalVersion::${{ steps.versionInfo.outputs.version }}${{ steps.prereleaseInfo.outputs.prereleaseTag }}"
          echo "::set-output name=assemblyFileVersion::${{ steps.versionInfo.outputs.version }}.${{ steps.versionInfo.outputs.increment }}"
          echo "::set-output name=assemblyVersion::${{ steps.versionInfo.outputs.major }}.0.0.0"
          echo "::set-output name=tagVersion::v${{ steps.versionInfo.outputs.version }}+${{ steps.versionInfo.outputs.increment }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build -c Release --no-restore /p:Version=${{ steps.netVersions.outputs.assemblyVersion }} /p:InformationalVersion=${{ steps.netVersions.outputs.assemblyInformationalVersion }} /p:AssemblyFileVersion=${{ steps.netVersions.outputs.assemblyFileVersion }}
      - name: Test
        run: dotnet test -c Release --no-build --verbosity normal
      - name: Publish
        run: dotnet publish -c Release /p:Version=${{ steps.netVersions.outputs.assemblyVersion }} /p:InformationalVersion=${{ steps.netVersions.outputs.assemblyInformationalVersion }} /p:AssemblyFileVersion=${{ steps.netVersions.outputs.assemblyFileVersion }}
      - name: Choco Package
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: pack xkpasswd.cli\bin\Release\net5.0\win-x64\publish\xkpasswd.cli.nuspec --Version ${{ steps.netVersions.outputs.chocoPackageVersion }}
      - name: Push Package To hefnet.co
        run: |
          nuget push xkpasswd.cli.${{ steps.netVersions.outputs.chocoPackageVersion }}.nupkg ${{ secrets.HEFNET_NUGET_API_KEY }} -Source https://nuget.hefnet.co/api/odata -NonInteractive           
      - name: Tag build
        run: |
          git tag ${{ steps.netVersions.outputs.tagVersion }}
          git tag ${{ steps.netVersions.outputs.assemblyInformationalVersion }}
          git push origin --follow-tags refs/tags/${{ steps.netVersions.outputs.tagVersion }}
          git push origin --follow-tags refs/tags/${{ steps.netVersions.outputs.assemblyInformationalVersion }}
